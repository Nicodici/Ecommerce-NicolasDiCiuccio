# PROYECTO CARPIYOUTUBE - GU√çA DE DESARROLLO CON NODE.JS

## ¬øQU√â ES ESTE PROYECTO?
Este es un proyecto de JavaScript que utiliza Node.js para gesti√≥n de dependencias y herramientas de desarrollo.

## CONFIGURACI√ìN INICIAL
El proyecto ya est√° configurado con:
- ‚úÖ package.json inicializado
- ‚úÖ Dependencias de producci√≥n: toastify-js
- ‚úÖ Dependencias de desarrollo: live-server, nodemon, concurrently
- ‚úÖ Scripts personalizados configurados

## COMANDOS DISPONIBLES

### 1. INICIAR PROYECTO (RECOMENDADO PARA DESARROLLO)
```
npm run dev
```
- Inicia servidor local en puerto 3000
- Abre autom√°ticamente index.html en el navegador
- Recarga AUTOM√ÅTICA cuando cambias archivos en css/, js/, img/
- Perfecto para desarrollo activo

### 2. INICIAR PROYECTO (B√ÅSICO)
```
npm start
```
- Inicia servidor local en puerto 3000
- Abre autom√°ticamente index.html
- Recarga autom√°tica cuando cambias cualquier archivo

### 3. SERVIDOR SIMPLE
```
npm run serve
```
- Inicia servidor sin abrir navegador autom√°ticamente
- √ötil si ya tienes el navegador abierto en otra pesta√±a

### 4. INSTALAR DEPENDENCIAS (SI ES NECESARIO)
```
npm install
```
- Instala todas las dependencias del proyecto
- Solo necesario si descargas el proyecto por primera vez

## ESTRUCTURA DEL PROYECTO
```
CarpiYoutube/
‚îú‚îÄ‚îÄ index.html          # P√°gina principal
‚îú‚îÄ‚îÄ carrito.html        # P√°gina del carrito
‚îú‚îÄ‚îÄ package.json        # Configuraci√≥n Node.js y scripts
‚îú‚îÄ‚îÄ README.txt          # Este archivo
‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îî‚îÄ‚îÄ style.css       # Estilos del proyecto
‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îú‚îÄ‚îÄ main.js         # JavaScript principal
‚îÇ   ‚îî‚îÄ‚îÄ carrito.js      # JavaScript del carrito
‚îî‚îÄ‚îÄ img/                # Im√°genes del proyecto
```

## FLUJO DE TRABAJO RECOMENDADO

1. ABRIR TERMINAL EN LA CARPETA DEL PROYECTO
2. EJECUTAR: npm run dev
3. AUTOM√ÅTICAMENTE SE ABRIR√Å http://localhost:3000
4. EDITAR ARCHIVOS (HTML, CSS, JS)
5. VER CAMBIOS AUTOM√ÅTICAMENTE EN EL NAVEGADOR
6. PARA DETENER: Ctrl + C en la terminal

## BENEFICIOS DE USAR NODE.JS EN ESTE PROYECTO

‚úÖ RECARGA AUTOM√ÅTICA: No necesitas refrescar manualmente el navegador
‚úÖ SERVIDOR LOCAL: Evitas problemas de CORS y file://
‚úÖ GESTI√ìN DE DEPENDENCIAS: F√°cil instalaci√≥n de librer√≠as (como toastify-js)
‚úÖ DESARROLLO PROFESIONAL: Estructura est√°ndar de la industria
‚úÖ SCRIPTS PERSONALIZADOS: Comandos r√°pidos para tareas comunes

## DEPENDENCIAS INSTALADAS

PRODUCCI√ìN:
- toastify-js: Librer√≠a para notificaciones toast

DESARROLLO:
- live-server: Servidor local con recarga autom√°tica
- nodemon: Reinicia autom√°ticamente aplicaciones Node.js
- concurrently: Ejecuta m√∫ltiples comandos simult√°neamente

## PUERTOS UTILIZADOS
- Desarrollo: http://localhost:3000
- Si el puerto 3000 est√° ocupado, live-server buscar√° el siguiente disponible

## RESOLUCI√ìN DE PROBLEMAS

PROBLEMA: "npm no se reconoce como comando"
SOLUCI√ìN: Instalar Node.js desde https://nodejs.org

PROBLEMA: Puerto 3000 ocupado
SOLUCI√ìN: El servidor autom√°ticamente usar√° otro puerto disponible

PROBLEMA: Cambios no se reflejan
SOLUCI√ìN: 
1. Verificar que npm run dev est√© ejecut√°ndose
2. Revisar la consola del navegador por errores
3. Limpiar cach√© del navegador (Ctrl + F5)

## COMANDOS √öTILES ADICIONALES

Ver dependencias instaladas:
```
npm list
```

Actualizar dependencias:
```
npm update
```

Verificar vulnerabilidades:
```
npm audit
```

Arreglar vulnerabilidades autom√°ticamente:
```
npm audit fix
```

## NOTAS IMPORTANTES
- Siempre usar npm run dev para desarrollo activo
- Los cambios se guardan autom√°ticamente
- No cerrar la terminal mientras desarrollas
- El proyecto funciona sin internet una vez instalado

¬°FELIZ DESARROLLO! üöÄ